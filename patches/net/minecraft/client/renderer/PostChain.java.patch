--- a/net/minecraft/client/renderer/PostChain.java
+++ b/net/minecraft/client/renderer/PostChain.java
@@ -79,8 +_,8 @@
                     abstracttexture.setFilter(flag, false);
                     postpass.addInput(new PostPass.TextureInput(s3, abstracttexture, i, j));
                     continue;
-                case PostChainConfig.TargetInput(String s1, ResourceLocation resourcelocation1, boolean flag1, boolean flag2):
-                    postpass.addInput(new PostPass.TargetInput(s1, resourcelocation1, flag1, flag2));
+                case PostChainConfig.TargetInput(String s1, ResourceLocation resourcelocation1, boolean flag1, boolean flag2, boolean useStencilBuffer):
+                    postpass.addInput(new PostPass.TargetInput(s1, resourcelocation1, flag1, flag2, useStencilBuffer));
                     continue;
                 default:
                     throw new MatchException(null, null);
@@ -95,17 +_,32 @@
         Matrix4f matrix4f = new Matrix4f().setOrtho(0.0F, (float)p_361423_, 0.0F, (float)p_362735_, 0.1F, 1000.0F);
         Map<ResourceLocation, ResourceHandle<RenderTarget>> map = new HashMap<>(this.internalTargets.size() + this.externalTargets.size());
 
+        // Enable the depth and stencil buffers based on whether any external targets use them.
+        // This is necessary so any created buffers get the correct parameters for blitting.
+        boolean useDepth = false;
+        boolean useStencil = false;
         for (ResourceLocation resourcelocation : this.externalTargets) {
             map.put(resourcelocation, p_361871_.getOrThrow(resourcelocation));
+
+            var handle = p_361871_.get(resourcelocation);
+
+            if (handle instanceof FrameGraphBuilder.Handle<?> frameHandle
+                && frameHandle.getDescriptor() instanceof RenderTargetDescriptor renderDescriptor) {
+                    useDepth |= renderDescriptor.useDepth();
+                    useStencil |= renderDescriptor.useStencil();
+            } else {
+                useDepth |= p_361871_.get(resourcelocation).get().useDepth;
+                useStencil |= p_361871_.get(resourcelocation).get().useStencil;
+            }
         }
 
         for (Entry<ResourceLocation, PostChainConfig.InternalTarget> entry : this.internalTargets.entrySet()) {
             ResourceLocation resourcelocation1 = entry.getKey();
             RenderTargetDescriptor rendertargetdescriptor = switch (entry.getValue()) {
                 case PostChainConfig.FixedSizedTarget(int i, int j) -> {
-                    yield new RenderTargetDescriptor(i, j, true);
+                    yield new RenderTargetDescriptor(i, j, useDepth, useStencil);
                 }
-                case PostChainConfig.FullScreenTarget postchainconfig$fullscreentarget -> new RenderTargetDescriptor(p_361423_, p_362735_, true);
+                case PostChainConfig.FullScreenTarget postchainconfig$fullscreentarget -> new RenderTargetDescriptor(p_361423_, p_362735_, useDepth, useStencil);
                 default -> throw new MatchException(null, null);
             };
             map.put(resourcelocation1, p_362523_.createInternal(resourcelocation1.toString(), rendertargetdescriptor));
