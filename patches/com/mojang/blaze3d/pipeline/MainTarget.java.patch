--- a/com/mojang/blaze3d/pipeline/MainTarget.java
+++ b/com/mojang/blaze3d/pipeline/MainTarget.java
@@ -16,8 +_,12 @@
     static final MainTarget.Dimension DEFAULT_DIMENSIONS = new MainTarget.Dimension(854, 480);
 
     public MainTarget(int p_166137_, int p_166138_) {
-        super(true);
-        this.createFrameBuffer(p_166137_, p_166138_);
+        this(p_166137_, p_166138_, true, false);
+    }
+
+    public MainTarget(int width, int height, boolean useDepth, boolean useStencil) {
+        super(useDepth, useStencil);
+        this.createFrameBuffer(width, height);
     }
 
     private void createFrameBuffer(int p_166142_, int p_166143_) {
@@ -37,6 +_,10 @@
         GlStateManager._texParameter(3553, 10242, 33071);
         GlStateManager._texParameter(3553, 10243, 33071);
         GlStateManager._glFramebufferTexture2D(36160, 36096, 3553, this.depthBufferId, 0);
+        if (this.useStencil) {
+            GlStateManager._bindTexture(this.stencilBufferId);
+            GlStateManager._glFramebufferTexture2D(36160, org.lwjgl.opengl.GL32.GL_STENCIL_ATTACHMENT, 3553, this.stencilBufferId, 0);
+        }
         GlStateManager._bindTexture(0);
         this.viewWidth = maintarget$dimension.width;
         this.viewHeight = maintarget$dimension.height;
@@ -50,7 +_,14 @@
         RenderSystem.assertOnRenderThreadOrInit();
         this.colorTextureId = TextureUtil.generateTextureId();
         this.depthBufferId = TextureUtil.generateTextureId();
+        if (this.useStencil) {
+            this.stencilBufferId = this.depthBufferId;
+        }
         MainTarget.AttachmentState maintarget$attachmentstate = MainTarget.AttachmentState.NONE;
+        MainTarget.AttachmentState targetState = MainTarget.AttachmentState.COLOR_DEPTH;
+        if (this.useStencil) {
+            targetState = targetState.with(MainTarget.AttachmentState.STENCIL);
+        }
 
         for (MainTarget.Dimension maintarget$dimension : MainTarget.Dimension.listWithFallback(p_166147_, p_166148_)) {
             maintarget$attachmentstate = MainTarget.AttachmentState.NONE;
@@ -58,11 +_,15 @@
                 maintarget$attachmentstate = maintarget$attachmentstate.with(MainTarget.AttachmentState.COLOR);
             }
 
-            if (this.allocateDepthAttachment(maintarget$dimension)) {
+            if (this.useStencil && this.allocateDepthStencilAttachment(maintarget$dimension)) {
+                maintarget$attachmentstate = maintarget$attachmentstate.with(MainTarget.AttachmentState.DEPTH_STENCIL);
+            }
+
+            else if (this.allocateDepthAttachment(maintarget$dimension)) {
                 maintarget$attachmentstate = maintarget$attachmentstate.with(MainTarget.AttachmentState.DEPTH);
             }
 
-            if (maintarget$attachmentstate == MainTarget.AttachmentState.COLOR_DEPTH) {
+            if (maintarget$attachmentstate == targetState) {
                 return maintarget$dimension;
             }
         }
@@ -86,12 +_,24 @@
         return GlStateManager._getError() != 1285;
     }
 
+    private boolean allocateDepthStencilAttachment(MainTarget.Dimension p_166145_) {
+        RenderSystem.assertOnRenderThreadOrInit();
+        GlStateManager._getError();
+        GlStateManager._bindTexture(this.depthBufferId);
+        GlStateManager._texImage2D(3553, 0, 6402, p_166145_.width, p_166145_.height, 0, org.lwjgl.opengl.GL32.GL_DEPTH_STENCIL, org.lwjgl.opengl.GL32.GL_UNSIGNED_INT_24_8, null);
+        return GlStateManager._getError() != 1285;
+    }
+
     @OnlyIn(Dist.CLIENT)
     static enum AttachmentState {
         NONE,
         COLOR,
         DEPTH,
-        COLOR_DEPTH;
+        COLOR_DEPTH,
+        STENCIL,
+        COLOR_STENCIL,
+        DEPTH_STENCIL,
+        COLOR_DEPTH_STENCIL;
 
         private static final MainTarget.AttachmentState[] VALUES = values();
 
